# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe AppSettingsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # AppSetting. As you add validations to AppSetting, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      git_repository_url: 'test',
      git_repository_name: 'test',
      github_user_name: 'test',
      github_user_email: 'gummybear@space.tld',
      vsphere_server_ip: '127.0.0.1',
      vsphere_server_user: 'gozsdgfou2!§hdsfj',
      vsphere_server_password: '6§$%95r9v932',
      email_notification_smtp_address: 'smtp.email.com',
      email_notification_smtp_port: '1234',
      email_notification_smtp_domain: 'email.com',
      email_notification_smtp_user: 'myUser',
      email_notification_smtp_password: 'verySecure',
      vm_archivation_timeout: '120'
    }
  end

  let(:invalid_attributes) do
    valid_attributes.merge(
      github_user_email: 'helloWorld',
      email_notification_smtp_port: 'NoInteger',
      vm_archivation_timeout: 'NoInteger2'
    )
  end

  before do
    sign_in FactoryBot.create(:admin)
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      app_setting = AppSetting.instance
      get :edit, params: { id: app_setting.to_param }
      expect(response).to be_successful
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      it 'updates the requested app_setting' do
        app_setting = AppSetting.instance
        put :update, params: { id: app_setting.to_param, app_setting: valid_attributes }
        app_setting.reload
        expect(app_setting.vsphere_server_password).to be_equal(valid_attributes[:vsphere_server_password])
      end

      it 'redirects to the app_setting' do
        app_setting = AppSetting.instance
        put :update, params: { id: app_setting.to_param, app_setting: valid_attributes }
        expect(response).to redirect_to(edit_app_setting_path(app_setting))
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        app_setting = AppSetting.instance
        put :update, params: { id: app_setting.to_param, app_setting: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end
end
